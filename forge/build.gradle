plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

loom {
    forge {
        mixinConfig "mixin.dadobugbedrockores-common.json"

        dataGen {
            mod "dadobugbedrockores"
        }
    }

    launches {
        data {
            arg "--existing", file("../common/src/main/resources").absolutePath
            arg "--existing", file("src/generated/resources").absolutePath
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:6.2.62"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow-forge"
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

jar {
    classifier "dev-forge"
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

sourcesJar {
    classifier "sources-forge"
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-forge-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
